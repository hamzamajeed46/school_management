# Generated by Django 5.2.4 on 2025-08-07 11:39

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="e.g., '10-A', 'Grade 9', 'Class 12-Science'", max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Additional information about the class', null=True)),
                ('academic_year', models.CharField(help_text="e.g., '2024-2025'", max_length=20)),
                ('capacity', models.PositiveIntegerField(default=30, help_text='Maximum number of students in this class', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this class is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Class',
                'verbose_name_plural': 'Classes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(help_text='Unique student identification number', max_length=20, unique=True)),
                ('admission_date', models.DateField(help_text='Date when student was admitted')),
                ('guardian_name', models.CharField(help_text='Name of parent/guardian', max_length=100)),
                ('guardian_phone', models.CharField(help_text="Guardian's contact number", max_length=15)),
                ('guardian_email', models.EmailField(blank=True, help_text="Guardian's email address", max_length=254, null=True)),
                ('emergency_contact', models.CharField(help_text='Emergency contact number', max_length=15)),
                ('medical_info', models.TextField(blank=True, help_text='Any medical conditions or allergies', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the student is currently enrolled')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_assigned', models.ForeignKey(blank=True, help_text='Class the student belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='core.class')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student Profile',
                'verbose_name_plural': 'Student Profiles',
                'ordering': ['student_id'],
            },
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(help_text='Unique teacher/employee identification number', max_length=20, unique=True)),
                ('qualification', models.CharField(choices=[('bachelor', "Bachelor's Degree"), ('master', "Master's Degree"), ('phd', 'PhD'), ('diploma', 'Diploma'), ('other', 'Other')], help_text='Highest educational qualification', max_length=20)),
                ('specialization', models.CharField(help_text='Subject specialization or field of expertise', max_length=100)),
                ('experience_years', models.PositiveIntegerField(default=0, help_text='Years of teaching experience')),
                ('joining_date', models.DateField(help_text='Date when teacher joined the institution')),
                ('salary', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly salary (optional)', max_digits=10, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the teacher is currently employed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Teacher Profile',
                'verbose_name_plural': 'Teacher Profiles',
                'ordering': ['employee_id'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="e.g., 'Mathematics', 'English Literature', 'Physics'", max_length=100)),
                ('code', models.CharField(help_text="Unique subject code, e.g., 'MATH101', 'ENG201'", max_length=20, unique=True)),
                ('description', models.TextField(blank=True, help_text='Subject description and objectives', null=True)),
                ('credits', models.PositiveIntegerField(default=3, help_text='Credit hours for this subject', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this subject is mandatory or optional')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this subject is currently being taught')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('class_assigned', models.ForeignKey(help_text='The class this subject is taught to', on_delete=django.db.models.deletion.CASCADE, related_name='subjects', to='core.class')),
                ('teacher', models.ForeignKey(blank=True, help_text='Teacher assigned to this subject', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subjects_taught', to='core.teacherprofile')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'ordering': ['class_assigned', 'name'],
                'unique_together': {('name', 'class_assigned')},
            },
        ),
        migrations.CreateModel(
            name='StudentSubjectEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateTimeField(auto_now_add=True, help_text='When the student enrolled in this subject')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the enrollment is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='core.studentprofile')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrolled_students', to='core.subject')),
            ],
            options={
                'verbose_name': 'Student Subject Enrollment',
                'verbose_name_plural': 'Student Subject Enrollments',
                'ordering': ['-enrollment_date'],
                'unique_together': {('student', 'subject')},
            },
        ),
    ]
